#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Nov 30 08:36:53 2019

@author: admin
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

features = pd.read_csv('/Users/admin/Desktop/feature.csv')
features=features.drop(features.columns[0],axis=1)

labels = pd.read_csv('/Users/admin/Desktop/labels.csv')
labels=labels.drop(labels.columns[0],axis=1)
a=list(labels['label'].unique())
cmap ={a[i]:i for i in range(len(a))}

labels=labels.replace({'label':cmap})



from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(features,labels,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit_transform(X_train)
scaler.fit(X_test)
count=1
accuracy = [0.0]*10
for z in range(10):
    from sklearn.ensemble import RandomForestRegressor
    regressor = RandomForestRegressor(n_estimators=5*count,random_state=0)
    
    regressor.fit(X_train,Y_train)
    y_pred = regressor.predict(X_test)
    for i in range(len(y_pred)):
        y_pred[i]=int(y_pred[i])
        
    from sklearn.metrics import confusion_matrix
    cm=confusion_matrix(Y_test,y_pred)
    acc=0
    sum1=0
    for i in range(len(cm)):
        for j in range(len(cm)):
            sum1=sum1+cm[i,j]
        acc=acc+cm[i,i]
    accuracy[z]=acc/sum1*100
    count = count+1
count=np.zeros(10)
a=1
for z in range(10):
    count[z]=5*a
    a=a+1
plt.plot(count,accuracy)
plt.xlabel('No. of Estimators')
plt.ylabel('Accuracy')
plt.title('Test Accuracy with change in Number of estimators')
plt.show()

prec=np.zeros(len(cm))
for j in range(len(cm)):
    precision=0
    for i in range(len(cm)):
        precision= precision + cm[i,j]
    prec[j]=cm[j,j]/precision
#print("Precision of matrix in % is:\n")
a=[0,1,2]
print('Output',"\t",'Precision (%)')
for i in range(len(a)):
    print(a[i],"\t",round(prec[i],2)*100) 


recall=np.zeros(len(cm))
for j in range(len(cm)):
    rec=0
    for i in range(len(cm)):
        rec= rec + cm[j,i]
    recall[j]=cm[j,j]/rec

#print("Recall of matrix in % is:\n",recall*100)
a=[0,1,2]
print('Output',"\t",'Recall (%)')
for i in range(len(a)):
    print(a[i],"\t",round(recall[i],2)*100) 

plt.plot(recall,prec)
#plt.bar(count_Y-0.2,recall*100,width=0.4, color='b', align='center',label='Recall')
#plt.bar(count_Y+0.2,prec*100,width=0.4, color='r', align='center', label='Precision')
#plt.xticks([r for r in range(len(count_Y))],class_names.values())
#plt.legend(loc='best')
plt.title('Recall & Precision Graph',fontsize=20)
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.show()